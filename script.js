const audioSource = document.getElementById('audio-source');
const playPauseButton = document.getElementById('play-pause-button');
const rewindButton = document.getElementById('rewind-button');
const forwardButton = document.getElementById('forward-button');
const stationTitle = document.getElementById('station-title');
const progressBarContainer = document.querySelector('.progress-bar-container');
const progressBar = document.querySelector('.progress-bar');


// SVG ikonok t√°rol√°sa
const playIcon = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24"><path d="M8 5v14l11-7z"/></svg>`;
const pauseIcon = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" width="24" height="24"><path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/></svg>`;

// Hangf√°jlok alap√∫tvonala
const audioBasePath = 'mp3/';
const englishAudioBasePath = 'eng_mp3/';
let fileNumber; // √Ållom√°s sz√°m v√°ltoz√≥ deklar√°l√°sa (glob√°lis scope-ban)

// K√©pek list√°ja - most m√°r HTML-b≈ël j√∂n
let stationImages;

// B√∂ng√©sz≈ë nyelv√©nek lek√©rdez√©se √©s hangf√°jl forr√°s√°nak be√°ll√≠t√°sa
function setAudioSourceBasedOnLanguage() {
    const browserLanguage = navigator.language || navigator.userLanguage;
    const languageCode = browserLanguage.substring(0, 2).toLowerCase();

    let selectedAudioBasePath = audioBasePath;

    if (languageCode !== 'hu') {
        selectedAudioBasePath = englishAudioBasePath;
    }

    const audioFilePath = selectedAudioBasePath + fileNumber + (languageCode === 'hu' ? '.mp3' : '_eng.mp3');
    audioSource.src = audioFilePath;
    console.log('Bet√∂lt√∂tt hangf√°jl:', audioFilePath);
}

// √Ållom√°s sz√°m√°nak √©s k√©pek list√°j√°nak be√°ll√≠t√°sa HTML-b≈ël
function initializeStationData() {
    if (typeof window.fileNumber !== 'undefined') {
        fileNumber = window.fileNumber;
    } else {
        // F√°jln√©vb≈ël pr√≥b√°ljuk kinyerni az √°llom√°s sz√°m√°t
        const filename = window.location.pathname.split('/').pop();
        const match = filename.match(/station_(\d+)\.html/);
        if (match && match[1]) {
            fileNumber = match[1];
        } else {
            fileNumber = '01'; // Alap√©rtelmezett √°llom√°s sz√°m, ha nem siker√ºl kinyerni
            console.warn('Nem siker√ºlt kinyerni az √°llom√°s sz√°m√°t a f√°jln√©vb≈ël, alap√©rtelmezett: 01');
        }
    }

    if (typeof window.stationImages !== 'undefined') {
        stationImages = window.stationImages;
    } else {
        stationImages = []; // √úres k√©pt√∂mb, ha nincs inline megadva
        console.warn('Nincs inline stationImages t√∂mb megadva, √ºres gal√©ria lesz.');
    }

    // B√∂ng√©sz≈ë nyelv√©nek lek√©rdez√©se
    const browserLanguage = navigator.language || navigator.userLanguage;
    const languageCode = browserLanguage.substring(0, 2).toLowerCase();

    // T√∂bbnyelv≈± c√≠m be√°ll√≠t√°sa
    let stationLabel = (languageCode === 'hu') ? `√Ållom√°s ${fileNumber}` : `Station ${fileNumber}`;
    stationTitle.textContent = stationLabel;
}



// Inicializ√°l√°s
initializeStationData();
setAudioSourceBasedOnLanguage();


playPauseButton.addEventListener('click', () => {
    if (audioSource.paused) {
        audioSource.play();
        playPauseButton.innerHTML = pauseIcon;
        playPauseButton.classList.add('playing'); // pulz√°l√≥ anim√°ci√≥ bekapcsol√°sa
    } else {
        audioSource.pause();
        playPauseButton.innerHTML = playIcon;
        playPauseButton.classList.remove('playing'); // anim√°ci√≥ kikapcsol√°sa
    }
});

// Visszateker√©s gomb funkcionalit√°sa
rewindButton.addEventListener('click', () => {
    audioSource.currentTime -= 10;
});


// El≈ëreteker√©s gomb funkcionalit√°sa
forwardButton.addEventListener('click', () => {
    audioSource.currentTime += 10;
});

// Progress bar friss√≠t√©se lej√°tsz√°s k√∂zben
audioSource.addEventListener('timeupdate', () => {
    if (audioSource.duration) {
        const progressPercentage = (audioSource.currentTime / audioSource.duration) * 100;
        progressBar.style.width = `${progressPercentage}%`;
    }
});

// Kattint√°s a progress bar-ra (ugr√°s az adott pontra)
progressBarContainer.addEventListener('click', (event) => {
    const clickPosition = event.offsetX / progressBarContainer.clientWidth;
    audioSource.currentTime = clickPosition * audioSource.duration;
});


// Sebess√©g√©rt√©kek t√∂mbje k√∂rforg√°shoz
const playbackRates = [1, 1.2, 1.5, 0.8];
let currentRateIndex = 0; // Alap√©rt√©k 1x (0. index)

const speedButton = document.getElementById('speed-button');

// Sebess√©g be√°ll√≠t√°sa f√ºggv√©ny
function setPlaybackRate(rate) {
    audioSource.playbackRate = rate;
    speedButton.textContent = rate + '√ó';
}

// Kezdeti √©rt√©k be√°ll√≠t√°sa
setPlaybackRate(playbackRates[currentRateIndex]);

// Sebess√©g gomb esem√©nyfigyel≈ë
speedButton.addEventListener('click', () => {
    currentRateIndex = (currentRateIndex + 1) % playbackRates.length;
    setPlaybackRate(playbackRates[currentRateIndex]);
});


// üîÑ K√∂r alak√∫ gal√©ria m≈±k√∂dtet√©se
const galleryImage = document.getElementById('gallery-image');
const prevButton = document.getElementById('prev-image');
const nextButton = document.getElementById('next-image');

// Ellen≈ërizz√ºk, hogy vannak-e k√©pek
if (window.stationImages && window.stationImages.length > 0) {
    let currentImageIndex = 0;

    function updateGalleryImage() {
        galleryImage.classList.add('fade-out');
    
        setTimeout(() => {
            galleryImage.src = `images/${window.stationImages[currentImageIndex]}`;
            galleryImage.classList.remove('fade-out');
        }, 300); // ennyi az id≈ë, am√≠g elt≈±nik (300ms)
    }

    prevButton.addEventListener('click', () => {
        currentImageIndex = (currentImageIndex - 1 + window.stationImages.length) % window.stationImages.length;
        updateGalleryImage();
    });

    nextButton.addEventListener('click', () => {
        currentImageIndex = (currentImageIndex + 1) % window.stationImages.length;
        updateGalleryImage();
    });

    // Kezd≈ë√©rt√©k be√°ll√≠t√°sa
    updateGalleryImage();
}

// üîΩ B√∂ng√©sz≈ë nyelv√©nek lek√©rdez√©se
const browserLanguage = navigator.language || navigator.userLanguage;
const languageCode = browserLanguage.substring(0, 2).toLowerCase();

// üîΩ Harmonika men√º m≈±k√∂dtet√©se
const accordionContainer = document.getElementById('accordion');

// Nyelvf√ºgg≈ë √°llom√°s inform√°ci√≥s adatok
const stationDescriptions = {
    "hu": [
        { title: "T√∂rt√©neti h√°tt√©r", content: "A magyar t√∂rv√©nyhoz√°s legkor√°bbi √≠r√°sos eml√©kei Szent Istv√°n kir√°ly idej√©b≈ël maradtak r√°nk. A gazdagon illusztr√°lt rom√°n kori k√≥dex fontoss√°g√°t nemcsak m≈±v√©szett√∂rt√©neti jelent≈ës√©ge adja, hanem az is, hogy √°llamalap√≠t√≥ Szent Istv√°n kir√°lyunk (1000‚Äì1038) t√∂rv√©nyeinek legkor√°bbi k√©zirat√°t ≈ërzi. Istv√°n kir√°ly k√©t fennmaradt t√∂rv√©nyk√∂nyve nagy hangs√∫lyt helyezett a frissen alap√≠tott magyar katolikus egyh√°z zavartalan m≈±k√∂d√©s√©nek biztos√≠t√°s√°ra √©s a nom√°d √©letm√≥dot felv√°lt√≥ feud√°lis, mag√°ntulajdonra √©p√ºl≈ë berendezked√©s megszil√°rd√≠t√°s√°ra. A kir√°ly szigor√∫ t√∂rv√©nyei el≈ë√≠rt√°k az egyh√°zi tized fizet√©s√©t, a t√≠z falunk√©nti k√∂telez≈ë templom√©p√≠t√©st, valamint az egyh√°zi szertart√°sok √©s szok√°sok megtart√°s√°t. Kem√©nyen b√ºntett√©k a k√∂zrend megs√©rt≈ëit, m√°s birtokainak √©s tulajdon√°nak zargat√≥it. √Ållamalap√≠t√≥ kir√°lyunk uralkod√≥i hatalma megk√©rd≈ëjelezhetetlen volt, m√©gis, m√°r e korai t√∂rv√©nykez√©s is sz√°mos helyen hivatkozik az uralkod√≥ mellett m≈±k√∂d≈ë kir√°lyi tan√°cs szerep√©re a t√∂rv√©nyhoz√°sban. A kir√°ly teh√°t t√∂rv√©nyei megalkot√°sakor kezdett≈ël fogva e sz≈±k tan√°csad√≥ test√ºletre t√°maszkodott." },
        { title: "√âp√≠t√©szeti jellemz≈ëk", content: "Az √©p√ºlet k√ºl√∂nleges st√≠lusjegyei √©s tervez√©se magyarul." }
    ],
    "en": [
        { title: "Historical Background", content: "This is the history and interesting facts about the station in English." },
        { title: "Architectural Features", content: "The special architectural style and design of the building in English." }
    ]
};

// Nyelvf√ºgg≈ë tartalom kiv√°laszt√°sa
const selectedDescriptions = stationDescriptions[languageCode] || stationDescriptions["en"];

// Ha van tartalom, akkor √©p√≠tse fel a harmonik√°t
if (selectedDescriptions.length > 0) {
    selectedDescriptions.forEach((item) => {
        const accordionItem = document.createElement('div');
        accordionItem.classList.add('accordion-item');

        const accordionHeader = document.createElement('div');
        accordionHeader.classList.add('accordion-header');
        accordionHeader.textContent = item.title;

        const accordionContent = document.createElement('div');
        accordionContent.classList.add('accordion-content');
        accordionContent.innerHTML = `<p>${item.content}</p>`;

        // Nyit√°s-z√°r√°s m≈±k√∂d√©s + automatikus g√∂rd√≠t√©s
        accordionHeader.addEventListener('click', () => {
            const isActive = accordionHeader.classList.contains('active');

            // Minden m√°sik lez√°r√°sa
            document.querySelectorAll('.accordion-header').forEach(header => {
                header.classList.remove('active');
                header.nextElementSibling.style.maxHeight = null;
                header.nextElementSibling.style.padding = "0 14px";
            });

            // Az aktu√°lis lenyit√°sa
            if (!isActive) {
                accordionHeader.classList.add('active');
                accordionContent.style.maxHeight = accordionContent.scrollHeight + "px";
                accordionContent.style.padding = "14px";

                // üì± Automatikus g√∂rd√≠t√©s mobilra optimaliz√°lva
                setTimeout(() => {
                    accordionHeader.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }, 300);
            }
        });

        // √ñsszekapcsol√°s a DOM-mal
        accordionItem.appendChild(accordionHeader);
        accordionItem.appendChild(accordionContent);
        accordionContainer.appendChild(accordionItem);
    });
}

// Anim√°ci√≥ kikapcsol√°sa, ha v√©get √©r a hang (a harmonik√°n k√≠v√ºl!)
audioSource.addEventListener('ended', () => {
    playPauseButton.innerHTML = playIcon;
    playPauseButton.classList.remove('playing');
});